(*
 * Copyright (c) 2016, Johns Hopkins University Applied Physics Laboratory
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *
 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

Require Import ZArith.
Require Import Lists.List.
Require Import Sorting.Sorted.
Require Import ZArith.
Require Import String.
Require Import Ascii.
Require Import Setoid.
Require Import SetoidClass.
Require Import Morphisms.
Require Import Basics.

Require Import SLMech.SequentialProof.
Require Import SLMech.Assertions.
Require Import SLMech.ProgramData.
Require Import SLMech.ProgramSemantics.
Require Import SLMech.Automation.

Theorem Max : forall (s : store_f) (h : heap_f) (l : locals) (d : domain) (st2 : state) (x y res : var) (vx vy : Z)
                     (pvx : sint32_min <= vx <= sint32_max)
                     (pvy : sint32_min <= vy <= sint32_max),
                (((lift_prop_sprop (store_bits (x::y::res::nil) l)) ☆ (x ≐ Some (Vsint32 vx pvx)) ☆ (y ≐ Some (Vsint32 vy pvy)))
                  {|srf := s ; lc := l; hpf := h; dm := d|}) ->
                (completes {|srf := s ; lc := l; hpf := h; dm := d|} st2
                           (
                             (ifelse (x < y)
                                     (res ≔ y)
                                     (res ≔ x));;
                             ret ;;
                             skip)) ->
                (((vx <? vy) = true -> (res ≐ Some (Vsint32 vy pvy)) st2) /\
                 ((vx <? vy) = false -> (res ≐ Some (Vsint32 vx pvx)) st2)).
Proof.
  intros.
  nova_star H.
  unfold lift_prop_sprop in SPROP.
  ifelsec H0 ;
    (* 
     * tactics chained together with a semicolon are applied
     * simultaneously to all branches created by the initial tactic.
     * we could actually include most of the rest of the proof here
     * and just zap right through it. But the goal is to show handling
     * cases generated by ifelsec, so we confine ourselves to just
     * cleaning up the branch condition a bit.
     *)
    simpl in IF_STMT_BEXPR ; injection IF_STMT_BEXPR ; intro IFCONDITION; clear IF_STMT_BEXPR.

  (* 
   * ifelsec creates two cases, one for the if branch and one for the
   * else branch. For whatever reason, we start with the else branch.
   *)
  
  (* finish the program *)
  program_paths H0.
  (* split the conjunction and ingest antecedents*)
  split ; intros.
  (* vx < vy -> (res = vy) st2, this is the ifcondition  *)
  assumption.

  (* not vx < vy -> (res = vx) st2 show vx < vy by the ifcondition*)
  rewrite IFCONDITION in H.
  discriminate H.
  
  (* 
   * that completes the else branch, so we bounce back up to the top
   * with the if branch. 
   *
   * Once again, the first thing we do is consume the rest of the
   * program.
   *)
  program_paths H0.

  (* then break apart the conjunction and ingest the antecedents *)
  split ; intros.
  (* not vx < vy -> (res = vx) st2 ... show not (vx < vy) is false *)
  rewrite IFCONDITION in H.
  discriminate H.

  (* vx < vy -> (res = vy) st2 *) 
  assumption.
Qed.
